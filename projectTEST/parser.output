Grammar

    0 $accept: class_decl $end

    1 @1: /* empty */

    2 @2: /* empty */

    3 class_decl: ACCMOD CLASS ID @1 '{' smallc_program '}' @2

    4 @3: /* empty */

    5 @4: /* empty */

    6 class_decl: CLASS ID @3 '{' smallc_program '}' @4

    7 smallc_program: /* empty */
    8               | smallc_program func
    9               | smallc_program var_decl
   10               | smallc_program class_decl
   11               | smallc_program constructor

   12 constructor: ID '(' param_decl_list ')' compound_stmt

   13 @5: /* empty */

   14 @6: /* empty */

   15 func: type_specifier ID @5 '(' param_decl_list ')' compound_stmt @6

   16 @7: /* empty */

   17 @8: /* empty */

   18 func: type_specifier '[' ']' ID @7 '(' param_decl_list ')' compound_stmt @8

   19 type_specifier: INT
   20               | FLOAT
   21               | CHAR
   22               | STRING
   23               | BOOL

   24 param_decl_list: /* empty */
   25                | param_decl
   26                | param_decl_list ',' param_decl

   27 param_decl: type_specifier ID
   28           | type_specifier ID '[' ']'

   29 @9: /* empty */

   30 @10: /* empty */

   31 compound_stmt: '{' @9 compound_stmts @10 '}'

   32 compound_stmts: /* empty */
   33               | compound_stmts var_decl
   34               | compound_stmts stmt

   35 var_decl: type_specifier var_decl_list ';'

   36 var_decl_list: variable_id
   37              | var_decl_list ',' variable_id

   38 variable_id: ID
   39            | ID '=' expr
   40            | ID '[' ']' '=' '{' primary_list '}'
   41            | ID '[' ']'

   42 stmt: compound_stmt
   43     | cond_stmt
   44     | while_stmt
   45     | BREAK ';'
   46     | assignstmt ';'
   47     | CONTINUE ';'
   48     | RETURN expr ';'

   49 cond_stmt: IF '(' expr ')' stmt
   50          | IF '(' expr ')' stmt ELSE stmt

   51 while_stmt: WHILE '(' expr ')' stmt

   52 assignstmt: ID '=' expr

   53 triplecondition: expr '?' expr ':' expr

   54 expr: primary
   55     | expr operator expr
   56     | '!' expr
   57     | '(' expr ')'
   58     | triplecondition
   59     | '-' expr
   60     | ID '(' expr_list ')'
   61     | ID '[' expr ']'

   62 expr_list: /* empty */
   63          | expr
   64          | expr_list SPACECOM expr

   65 operator: '+'
   66         | '-'
   67         | '*'
   68         | '/'
   69         | '<'
   70         | '>'
   71         | '||'
   72         | IS_EQUAL
   73         | '&&'

   74 primary: INTNUM
   75        | FLOATNUM
   76        | CHARCONST
   77        | STRINGCONST
   78        | ID
   79        | TRUE
   80        | FALSE
   81        | NUL

   82 primary_list: primary_list ',' primary
   83             | primary


Terminals, with rules where they appear

$end (0) 0
'!' (33) 56
'&&' (38) 73
'(' (40) 12 15 18 49 50 51 57 60
')' (41) 12 15 18 49 50 51 57 60
'*' (42) 67
'+' (43) 65
',' (44) 26 37 82
'-' (45) 59 66
'/' (47) 68
':' (58) 53
';' (59) 35 45 46 47 48
'<' (60) 69
'=' (61) 39 40 52
'>' (62) 70
'?' (63) 53
'[' (91) 18 28 40 41 61
']' (93) 18 28 40 41 61
'{' (123) 3 6 31 40
'||' (124) 71
'}' (125) 3 6 31 40
error (256)
ID (258) 3 6 12 15 18 27 28 38 39 40 41 52 60 61 78
INTNUM (259) 74
ACCMOD (260) 3
INT (261) 19
FLOAT (262) 20
CHAR (263) 21
STRING (264) 22
BOOL (265) 23
RETURN (266) 48
BREAK (267) 45
CONTINUE (268) 47
WHILE (269) 51
IF (270) 49 50
ELSE (271) 50
FLOATNUM (272) 75
CHARCONST (273) 76
STRINGCONST (274) 77
TRUE (275) 79
FALSE (276) 80
NUL (277) 81
IS_EQUAL (278) 72
SPACECOM (279) 64
CLASS (280) 3 6
IF_PREC (281)
OP (282)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
class_decl (49)
    on left: 3 6, on right: 0 10
@1 (50)
    on left: 1, on right: 3
@2 (51)
    on left: 2, on right: 3
@3 (52)
    on left: 4, on right: 6
@4 (53)
    on left: 5, on right: 6
smallc_program (54)
    on left: 7 8 9 10 11, on right: 3 6 8 9 10 11
constructor (55)
    on left: 12, on right: 11
func (56)
    on left: 15 18, on right: 8
@5 (57)
    on left: 13, on right: 15
@6 (58)
    on left: 14, on right: 15
@7 (59)
    on left: 16, on right: 18
@8 (60)
    on left: 17, on right: 18
type_specifier (61)
    on left: 19 20 21 22 23, on right: 15 18 27 28 35
param_decl_list (62)
    on left: 24 25 26, on right: 12 15 18 26
param_decl (63)
    on left: 27 28, on right: 25 26
compound_stmt (64)
    on left: 31, on right: 12 15 18 42
@9 (65)
    on left: 29, on right: 31
@10 (66)
    on left: 30, on right: 31
compound_stmts (67)
    on left: 32 33 34, on right: 31 33 34
var_decl (68)
    on left: 35, on right: 9 33
var_decl_list (69)
    on left: 36 37, on right: 35 37
variable_id (70)
    on left: 38 39 40 41, on right: 36 37
stmt (71)
    on left: 42 43 44 45 46 47 48, on right: 34 49 50 51
cond_stmt (72)
    on left: 49 50, on right: 43
while_stmt (73)
    on left: 51, on right: 44
assignstmt (74)
    on left: 52, on right: 46
triplecondition (75)
    on left: 53, on right: 58
expr (76)
    on left: 54 55 56 57 58 59 60 61, on right: 39 48 49 50 51 52 53
    55 56 57 59 61 63 64
expr_list (77)
    on left: 62 63 64, on right: 60 64
operator (78)
    on left: 65 66 67 68 69 70 71 72 73, on right: 55
primary (79)
    on left: 74 75 76 77 78 79 80 81, on right: 54 82 83
primary_list (80)
    on left: 82 83, on right: 40 82


state 0

    0 $accept: . class_decl $end

    ACCMOD  shift, and go to state 1
    CLASS   shift, and go to state 2

    class_decl  go to state 3


state 1

    3 class_decl: ACCMOD . CLASS ID @1 '{' smallc_program '}' @2

    CLASS  shift, and go to state 4


state 2

    6 class_decl: CLASS . ID @3 '{' smallc_program '}' @4

    ID  shift, and go to state 5


state 3

    0 $accept: class_decl . $end

    $end  shift, and go to state 6


state 4

    3 class_decl: ACCMOD CLASS . ID @1 '{' smallc_program '}' @2

    ID  shift, and go to state 7


state 5

    6 class_decl: CLASS ID . @3 '{' smallc_program '}' @4

    $default  reduce using rule 4 (@3)

    @3  go to state 8


state 6

    0 $accept: class_decl $end .

    $default  accept


state 7

    3 class_decl: ACCMOD CLASS ID . @1 '{' smallc_program '}' @2

    $default  reduce using rule 1 (@1)

    @1  go to state 9


state 8

    6 class_decl: CLASS ID @3 . '{' smallc_program '}' @4

    '{'  shift, and go to state 10


state 9

    3 class_decl: ACCMOD CLASS ID @1 . '{' smallc_program '}' @2

    '{'  shift, and go to state 11


state 10

    6 class_decl: CLASS ID @3 '{' . smallc_program '}' @4

    $default  reduce using rule 7 (smallc_program)

    smallc_program  go to state 12


state 11

    3 class_decl: ACCMOD CLASS ID @1 '{' . smallc_program '}' @2

    $default  reduce using rule 7 (smallc_program)

    smallc_program  go to state 13


state 12

    6 class_decl: CLASS ID @3 '{' smallc_program . '}' @4
    8 smallc_program: smallc_program . func
    9               | smallc_program . var_decl
   10               | smallc_program . class_decl
   11               | smallc_program . constructor

    ID      shift, and go to state 14
    ACCMOD  shift, and go to state 1
    INT     shift, and go to state 15
    FLOAT   shift, and go to state 16
    CHAR    shift, and go to state 17
    STRING  shift, and go to state 18
    BOOL    shift, and go to state 19
    CLASS   shift, and go to state 2
    '}'     shift, and go to state 20

    class_decl      go to state 21
    constructor     go to state 22
    func            go to state 23
    type_specifier  go to state 24
    var_decl        go to state 25


state 13

    3 class_decl: ACCMOD CLASS ID @1 '{' smallc_program . '}' @2
    8 smallc_program: smallc_program . func
    9               | smallc_program . var_decl
   10               | smallc_program . class_decl
   11               | smallc_program . constructor

    ID      shift, and go to state 14
    ACCMOD  shift, and go to state 1
    INT     shift, and go to state 15
    FLOAT   shift, and go to state 16
    CHAR    shift, and go to state 17
    STRING  shift, and go to state 18
    BOOL    shift, and go to state 19
    CLASS   shift, and go to state 2
    '}'     shift, and go to state 26

    class_decl      go to state 21
    constructor     go to state 22
    func            go to state 23
    type_specifier  go to state 24
    var_decl        go to state 25


state 14

   12 constructor: ID . '(' param_decl_list ')' compound_stmt

    '('  shift, and go to state 27


state 15

   19 type_specifier: INT .

    $default  reduce using rule 19 (type_specifier)


state 16

   20 type_specifier: FLOAT .

    $default  reduce using rule 20 (type_specifier)


state 17

   21 type_specifier: CHAR .

    $default  reduce using rule 21 (type_specifier)


state 18

   22 type_specifier: STRING .

    $default  reduce using rule 22 (type_specifier)


state 19

   23 type_specifier: BOOL .

    $default  reduce using rule 23 (type_specifier)


state 20

    6 class_decl: CLASS ID @3 '{' smallc_program '}' . @4

    $default  reduce using rule 5 (@4)

    @4  go to state 28


state 21

   10 smallc_program: smallc_program class_decl .

    $default  reduce using rule 10 (smallc_program)


state 22

   11 smallc_program: smallc_program constructor .

    $default  reduce using rule 11 (smallc_program)


state 23

    8 smallc_program: smallc_program func .

    $default  reduce using rule 8 (smallc_program)


state 24

   15 func: type_specifier . ID @5 '(' param_decl_list ')' compound_stmt @6
   18     | type_specifier . '[' ']' ID @7 '(' param_decl_list ')' compound_stmt @8
   35 var_decl: type_specifier . var_decl_list ';'

    ID   shift, and go to state 29
    '['  shift, and go to state 30

    var_decl_list  go to state 31
    variable_id    go to state 32


state 25

    9 smallc_program: smallc_program var_decl .

    $default  reduce using rule 9 (smallc_program)


state 26

    3 class_decl: ACCMOD CLASS ID @1 '{' smallc_program '}' . @2

    $default  reduce using rule 2 (@2)

    @2  go to state 33


state 27

   12 constructor: ID '(' . param_decl_list ')' compound_stmt

    INT     shift, and go to state 15
    FLOAT   shift, and go to state 16
    CHAR    shift, and go to state 17
    STRING  shift, and go to state 18
    BOOL    shift, and go to state 19

    $default  reduce using rule 24 (param_decl_list)

    type_specifier   go to state 34
    param_decl_list  go to state 35
    param_decl       go to state 36


state 28

    6 class_decl: CLASS ID @3 '{' smallc_program '}' @4 .

    $default  reduce using rule 6 (class_decl)


state 29

   15 func: type_specifier ID . @5 '(' param_decl_list ')' compound_stmt @6
   38 variable_id: ID .
   39            | ID . '=' expr
   40            | ID . '[' ']' '=' '{' primary_list '}'
   41            | ID . '[' ']'

    '='  shift, and go to state 37
    '['  shift, and go to state 38

    '('       reduce using rule 13 (@5)
    $default  reduce using rule 38 (variable_id)

    @5  go to state 39


state 30

   18 func: type_specifier '[' . ']' ID @7 '(' param_decl_list ')' compound_stmt @8

    ']'  shift, and go to state 40


state 31

   35 var_decl: type_specifier var_decl_list . ';'
   37 var_decl_list: var_decl_list . ',' variable_id

    ','  shift, and go to state 41
    ';'  shift, and go to state 42


state 32

   36 var_decl_list: variable_id .

    $default  reduce using rule 36 (var_decl_list)


state 33

    3 class_decl: ACCMOD CLASS ID @1 '{' smallc_program '}' @2 .

    $default  reduce using rule 3 (class_decl)


state 34

   27 param_decl: type_specifier . ID
   28           | type_specifier . ID '[' ']'

    ID  shift, and go to state 43


state 35

   12 constructor: ID '(' param_decl_list . ')' compound_stmt
   26 param_decl_list: param_decl_list . ',' param_decl

    ')'  shift, and go to state 44
    ','  shift, and go to state 45


state 36

   25 param_decl_list: param_decl .

    $default  reduce using rule 25 (param_decl_list)


state 37

   39 variable_id: ID '=' . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 58
    primary          go to state 59


state 38

   40 variable_id: ID '[' . ']' '=' '{' primary_list '}'
   41            | ID '[' . ']'

    ']'  shift, and go to state 60


state 39

   15 func: type_specifier ID @5 . '(' param_decl_list ')' compound_stmt @6

    '('  shift, and go to state 61


state 40

   18 func: type_specifier '[' ']' . ID @7 '(' param_decl_list ')' compound_stmt @8

    ID  shift, and go to state 62


state 41

   37 var_decl_list: var_decl_list ',' . variable_id

    ID  shift, and go to state 63

    variable_id  go to state 64


state 42

   35 var_decl: type_specifier var_decl_list ';' .

    $default  reduce using rule 35 (var_decl)


state 43

   27 param_decl: type_specifier ID .
   28           | type_specifier ID . '[' ']'

    '['  shift, and go to state 65

    $default  reduce using rule 27 (param_decl)


state 44

   12 constructor: ID '(' param_decl_list ')' . compound_stmt

    '{'  shift, and go to state 66

    compound_stmt  go to state 67


state 45

   26 param_decl_list: param_decl_list ',' . param_decl

    INT     shift, and go to state 15
    FLOAT   shift, and go to state 16
    CHAR    shift, and go to state 17
    STRING  shift, and go to state 18
    BOOL    shift, and go to state 19

    type_specifier  go to state 34
    param_decl      go to state 68


state 46

   60 expr: ID . '(' expr_list ')'
   61     | ID . '[' expr ']'
   78 primary: ID .

    '('  shift, and go to state 69
    '['  shift, and go to state 70

    $default  reduce using rule 78 (primary)


state 47

   74 primary: INTNUM .

    $default  reduce using rule 74 (primary)


state 48

   75 primary: FLOATNUM .

    $default  reduce using rule 75 (primary)


state 49

   76 primary: CHARCONST .

    $default  reduce using rule 76 (primary)


state 50

   77 primary: STRINGCONST .

    $default  reduce using rule 77 (primary)


state 51

   79 primary: TRUE .

    $default  reduce using rule 79 (primary)


state 52

   80 primary: FALSE .

    $default  reduce using rule 80 (primary)


state 53

   81 primary: NUL .

    $default  reduce using rule 81 (primary)


state 54

   56 expr: '!' . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 71
    primary          go to state 59


state 55

   59 expr: '-' . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 72
    primary          go to state 59


state 56

   57 expr: '(' . expr ')'

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 73
    primary          go to state 59


state 57

   58 expr: triplecondition .

    $default  reduce using rule 58 (expr)


state 58

   39 variable_id: ID '=' expr .
   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    '?'       shift, and go to state 83

    $default  reduce using rule 39 (variable_id)

    operator  go to state 84


state 59

   54 expr: primary .

    $default  reduce using rule 54 (expr)


state 60

   40 variable_id: ID '[' ']' . '=' '{' primary_list '}'
   41            | ID '[' ']' .

    '='  shift, and go to state 85

    $default  reduce using rule 41 (variable_id)


state 61

   15 func: type_specifier ID @5 '(' . param_decl_list ')' compound_stmt @6

    INT     shift, and go to state 15
    FLOAT   shift, and go to state 16
    CHAR    shift, and go to state 17
    STRING  shift, and go to state 18
    BOOL    shift, and go to state 19

    $default  reduce using rule 24 (param_decl_list)

    type_specifier   go to state 34
    param_decl_list  go to state 86
    param_decl       go to state 36


state 62

   18 func: type_specifier '[' ']' ID . @7 '(' param_decl_list ')' compound_stmt @8

    $default  reduce using rule 16 (@7)

    @7  go to state 87


state 63

   38 variable_id: ID .
   39            | ID . '=' expr
   40            | ID . '[' ']' '=' '{' primary_list '}'
   41            | ID . '[' ']'

    '='  shift, and go to state 37
    '['  shift, and go to state 38

    $default  reduce using rule 38 (variable_id)


state 64

   37 var_decl_list: var_decl_list ',' variable_id .

    $default  reduce using rule 37 (var_decl_list)


state 65

   28 param_decl: type_specifier ID '[' . ']'

    ']'  shift, and go to state 88


state 66

   31 compound_stmt: '{' . @9 compound_stmts @10 '}'

    $default  reduce using rule 29 (@9)

    @9  go to state 89


state 67

   12 constructor: ID '(' param_decl_list ')' compound_stmt .

    $default  reduce using rule 12 (constructor)


state 68

   26 param_decl_list: param_decl_list ',' param_decl .

    $default  reduce using rule 26 (param_decl_list)


state 69

   60 expr: ID '(' . expr_list ')'

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    $default  reduce using rule 62 (expr_list)

    triplecondition  go to state 57
    expr             go to state 90
    expr_list        go to state 91
    primary          go to state 59


state 70

   61 expr: ID '[' . expr ']'

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 92
    primary          go to state 59


state 71

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   56     | '!' expr .

    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '?'  shift, and go to state 83

    $default  reduce using rule 56 (expr)

    operator  go to state 84


state 72

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   59     | '-' expr .

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '?'  shift, and go to state 83

    $default  reduce using rule 59 (expr)

    operator  go to state 84


state 73

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   57     | '(' expr . ')'

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    ')'       shift, and go to state 93
    '?'       shift, and go to state 83

    operator  go to state 84


state 74

   72 operator: IS_EQUAL .

    $default  reduce using rule 72 (operator)


state 75

   69 operator: '<' .

    $default  reduce using rule 69 (operator)


state 76

   70 operator: '>' .

    $default  reduce using rule 70 (operator)


state 77

   73 operator: '&&' .

    $default  reduce using rule 73 (operator)


state 78

   71 operator: '||' .

    $default  reduce using rule 71 (operator)


state 79

   65 operator: '+' .

    $default  reduce using rule 65 (operator)


state 80

   66 operator: '-' .

    $default  reduce using rule 66 (operator)


state 81

   67 operator: '*' .

    $default  reduce using rule 67 (operator)


state 82

   68 operator: '/' .

    $default  reduce using rule 68 (operator)


state 83

   53 triplecondition: expr '?' . expr ':' expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 94
    primary          go to state 59


state 84

   55 expr: expr operator . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 95
    primary          go to state 59


state 85

   40 variable_id: ID '[' ']' '=' . '{' primary_list '}'

    '{'  shift, and go to state 96


state 86

   15 func: type_specifier ID @5 '(' param_decl_list . ')' compound_stmt @6
   26 param_decl_list: param_decl_list . ',' param_decl

    ')'  shift, and go to state 97
    ','  shift, and go to state 45


state 87

   18 func: type_specifier '[' ']' ID @7 . '(' param_decl_list ')' compound_stmt @8

    '('  shift, and go to state 98


state 88

   28 param_decl: type_specifier ID '[' ']' .

    $default  reduce using rule 28 (param_decl)


state 89

   31 compound_stmt: '{' @9 . compound_stmts @10 '}'

    $default  reduce using rule 32 (compound_stmts)

    compound_stmts  go to state 99


state 90

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   63 expr_list: expr .

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    '?'       shift, and go to state 83

    $default  reduce using rule 63 (expr_list)

    operator  go to state 84


state 91

   60 expr: ID '(' expr_list . ')'
   64 expr_list: expr_list . SPACECOM expr

    SPACECOM  shift, and go to state 100
    ')'       shift, and go to state 101


state 92

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   61     | ID '[' expr . ']'

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    '?'       shift, and go to state 83
    ']'       shift, and go to state 102

    operator  go to state 84


state 93

   57 expr: '(' expr ')' .

    $default  reduce using rule 57 (expr)


state 94

   53 triplecondition: expr . '?' expr ':' expr
   53                | expr '?' expr . ':' expr
   55 expr: expr . operator expr

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    ':'       shift, and go to state 103
    '?'       shift, and go to state 83

    operator  go to state 84


state 95

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   55     | expr operator expr .

    '?'  shift, and go to state 83

    $default  reduce using rule 55 (expr)

    operator  go to state 84


state 96

   40 variable_id: ID '[' ']' '=' '{' . primary_list '}'

    ID           shift, and go to state 104
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53

    primary       go to state 105
    primary_list  go to state 106


state 97

   15 func: type_specifier ID @5 '(' param_decl_list ')' . compound_stmt @6

    '{'  shift, and go to state 66

    compound_stmt  go to state 107


state 98

   18 func: type_specifier '[' ']' ID @7 '(' . param_decl_list ')' compound_stmt @8

    INT     shift, and go to state 15
    FLOAT   shift, and go to state 16
    CHAR    shift, and go to state 17
    STRING  shift, and go to state 18
    BOOL    shift, and go to state 19

    $default  reduce using rule 24 (param_decl_list)

    type_specifier   go to state 34
    param_decl_list  go to state 108
    param_decl       go to state 36


state 99

   31 compound_stmt: '{' @9 compound_stmts . @10 '}'
   33 compound_stmts: compound_stmts . var_decl
   34               | compound_stmts . stmt

    ID        shift, and go to state 109
    INT       shift, and go to state 15
    FLOAT     shift, and go to state 16
    CHAR      shift, and go to state 17
    STRING    shift, and go to state 18
    BOOL      shift, and go to state 19
    RETURN    shift, and go to state 110
    BREAK     shift, and go to state 111
    CONTINUE  shift, and go to state 112
    WHILE     shift, and go to state 113
    IF        shift, and go to state 114
    '{'       shift, and go to state 66

    $default  reduce using rule 30 (@10)

    type_specifier  go to state 115
    compound_stmt   go to state 116
    @10             go to state 117
    var_decl        go to state 118
    stmt            go to state 119
    cond_stmt       go to state 120
    while_stmt      go to state 121
    assignstmt      go to state 122


state 100

   64 expr_list: expr_list SPACECOM . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 123
    primary          go to state 59


state 101

   60 expr: ID '(' expr_list ')' .

    $default  reduce using rule 60 (expr)


state 102

   61 expr: ID '[' expr ']' .

    $default  reduce using rule 61 (expr)


state 103

   53 triplecondition: expr '?' expr ':' . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 124
    primary          go to state 59


state 104

   78 primary: ID .

    $default  reduce using rule 78 (primary)


state 105

   83 primary_list: primary .

    $default  reduce using rule 83 (primary_list)


state 106

   40 variable_id: ID '[' ']' '=' '{' primary_list . '}'
   82 primary_list: primary_list . ',' primary

    '}'  shift, and go to state 125
    ','  shift, and go to state 126


state 107

   15 func: type_specifier ID @5 '(' param_decl_list ')' compound_stmt . @6

    $default  reduce using rule 14 (@6)

    @6  go to state 127


state 108

   18 func: type_specifier '[' ']' ID @7 '(' param_decl_list . ')' compound_stmt @8
   26 param_decl_list: param_decl_list . ',' param_decl

    ')'  shift, and go to state 128
    ','  shift, and go to state 45


state 109

   52 assignstmt: ID . '=' expr

    '='  shift, and go to state 129


state 110

   48 stmt: RETURN . expr ';'

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 130
    primary          go to state 59


state 111

   45 stmt: BREAK . ';'

    ';'  shift, and go to state 131


state 112

   47 stmt: CONTINUE . ';'

    ';'  shift, and go to state 132


state 113

   51 while_stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 133


state 114

   49 cond_stmt: IF . '(' expr ')' stmt
   50          | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 134


state 115

   35 var_decl: type_specifier . var_decl_list ';'

    ID  shift, and go to state 63

    var_decl_list  go to state 31
    variable_id    go to state 32


state 116

   42 stmt: compound_stmt .

    $default  reduce using rule 42 (stmt)


state 117

   31 compound_stmt: '{' @9 compound_stmts @10 . '}'

    '}'  shift, and go to state 135


state 118

   33 compound_stmts: compound_stmts var_decl .

    $default  reduce using rule 33 (compound_stmts)


state 119

   34 compound_stmts: compound_stmts stmt .

    $default  reduce using rule 34 (compound_stmts)


state 120

   43 stmt: cond_stmt .

    $default  reduce using rule 43 (stmt)


state 121

   44 stmt: while_stmt .

    $default  reduce using rule 44 (stmt)


state 122

   46 stmt: assignstmt . ';'

    ';'  shift, and go to state 136


state 123

   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr
   64 expr_list: expr_list SPACECOM expr .

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    '?'       shift, and go to state 83

    $default  reduce using rule 64 (expr_list)

    operator  go to state 84


state 124

   53 triplecondition: expr . '?' expr ':' expr
   53                | expr '?' expr ':' expr .
   55 expr: expr . operator expr

    '?'  shift, and go to state 83

    $default  reduce using rule 53 (triplecondition)

    operator  go to state 84


state 125

   40 variable_id: ID '[' ']' '=' '{' primary_list '}' .

    $default  reduce using rule 40 (variable_id)


state 126

   82 primary_list: primary_list ',' . primary

    ID           shift, and go to state 104
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53

    primary  go to state 137


state 127

   15 func: type_specifier ID @5 '(' param_decl_list ')' compound_stmt @6 .

    $default  reduce using rule 15 (func)


state 128

   18 func: type_specifier '[' ']' ID @7 '(' param_decl_list ')' . compound_stmt @8

    '{'  shift, and go to state 66

    compound_stmt  go to state 138


state 129

   52 assignstmt: ID '=' . expr

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 139
    primary          go to state 59


state 130

   48 stmt: RETURN expr . ';'
   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    '?'       shift, and go to state 83
    ';'       shift, and go to state 140

    operator  go to state 84


state 131

   45 stmt: BREAK ';' .

    $default  reduce using rule 45 (stmt)


state 132

   47 stmt: CONTINUE ';' .

    $default  reduce using rule 47 (stmt)


state 133

   51 while_stmt: WHILE '(' . expr ')' stmt

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 141
    primary          go to state 59


state 134

   49 cond_stmt: IF '(' . expr ')' stmt
   50          | IF '(' . expr ')' stmt ELSE stmt

    ID           shift, and go to state 46
    INTNUM       shift, and go to state 47
    FLOATNUM     shift, and go to state 48
    CHARCONST    shift, and go to state 49
    STRINGCONST  shift, and go to state 50
    TRUE         shift, and go to state 51
    FALSE        shift, and go to state 52
    NUL          shift, and go to state 53
    '!'          shift, and go to state 54
    '-'          shift, and go to state 55
    '('          shift, and go to state 56

    triplecondition  go to state 57
    expr             go to state 142
    primary          go to state 59


state 135

   31 compound_stmt: '{' @9 compound_stmts @10 '}' .

    $default  reduce using rule 31 (compound_stmt)


state 136

   46 stmt: assignstmt ';' .

    $default  reduce using rule 46 (stmt)


state 137

   82 primary_list: primary_list ',' primary .

    $default  reduce using rule 82 (primary_list)


state 138

   18 func: type_specifier '[' ']' ID @7 '(' param_decl_list ')' compound_stmt . @8

    $default  reduce using rule 17 (@8)

    @8  go to state 143


state 139

   52 assignstmt: ID '=' expr .
   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    '?'       shift, and go to state 83

    $default  reduce using rule 52 (assignstmt)

    operator  go to state 84


state 140

   48 stmt: RETURN expr ';' .

    $default  reduce using rule 48 (stmt)


state 141

   51 while_stmt: WHILE '(' expr . ')' stmt
   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    ')'       shift, and go to state 144
    '?'       shift, and go to state 83

    operator  go to state 84


state 142

   49 cond_stmt: IF '(' expr . ')' stmt
   50          | IF '(' expr . ')' stmt ELSE stmt
   53 triplecondition: expr . '?' expr ':' expr
   55 expr: expr . operator expr

    IS_EQUAL  shift, and go to state 74
    '<'       shift, and go to state 75
    '>'       shift, and go to state 76
    '&&'      shift, and go to state 77
    '||'      shift, and go to state 78
    '+'       shift, and go to state 79
    '-'       shift, and go to state 80
    '*'       shift, and go to state 81
    '/'       shift, and go to state 82
    ')'       shift, and go to state 145
    '?'       shift, and go to state 83

    operator  go to state 84


state 143

   18 func: type_specifier '[' ']' ID @7 '(' param_decl_list ')' compound_stmt @8 .

    $default  reduce using rule 18 (func)


state 144

   51 while_stmt: WHILE '(' expr ')' . stmt

    ID        shift, and go to state 109
    RETURN    shift, and go to state 110
    BREAK     shift, and go to state 111
    CONTINUE  shift, and go to state 112
    WHILE     shift, and go to state 113
    IF        shift, and go to state 114
    '{'       shift, and go to state 66

    compound_stmt  go to state 116
    stmt           go to state 146
    cond_stmt      go to state 120
    while_stmt     go to state 121
    assignstmt     go to state 122


state 145

   49 cond_stmt: IF '(' expr ')' . stmt
   50          | IF '(' expr ')' . stmt ELSE stmt

    ID        shift, and go to state 109
    RETURN    shift, and go to state 110
    BREAK     shift, and go to state 111
    CONTINUE  shift, and go to state 112
    WHILE     shift, and go to state 113
    IF        shift, and go to state 114
    '{'       shift, and go to state 66

    compound_stmt  go to state 116
    stmt           go to state 147
    cond_stmt      go to state 120
    while_stmt     go to state 121
    assignstmt     go to state 122


state 146

   51 while_stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 51 (while_stmt)


state 147

   49 cond_stmt: IF '(' expr ')' stmt .
   50          | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 148

    $default  reduce using rule 49 (cond_stmt)


state 148

   50 cond_stmt: IF '(' expr ')' stmt ELSE . stmt

    ID        shift, and go to state 109
    RETURN    shift, and go to state 110
    BREAK     shift, and go to state 111
    CONTINUE  shift, and go to state 112
    WHILE     shift, and go to state 113
    IF        shift, and go to state 114
    '{'       shift, and go to state 66

    compound_stmt  go to state 116
    stmt           go to state 149
    cond_stmt      go to state 120
    while_stmt     go to state 121
    assignstmt     go to state 122


state 149

   50 cond_stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 50 (cond_stmt)
